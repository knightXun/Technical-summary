

find高级使用

– find [目录] [条件1] [-a|-o] [条件2] ...
– 常用条件表示:                                     
-type 类型(f、d、l)
-name "文档名称"
-size +|-文件大小(k、M、G)
-user 用户名
-mtime 根据文件修改时间
  
 例子
-type 类型(f文本文件、d目录、l快捷方式)        find /boot  -type l/f/d
-name '文档名称'                            find /etc/  -name  '*tab'
-size +|-文件大小(k、M、G)                  find /boot/ -size +10 
-mtime 根据文件修改时间(都是过去时间)          find /var/   -mtime +90     
 +10:十天之前,-10:最近十天之内
-user 用户名                               find  /home  -user student
 
 ###################################################################
 
 find扩展使用
• 使用find命令的 -exec 操作
– find .. .. -exec 处理命令 {} \;
– 优势:以 {} 代替每一个结果,逐个处理,遇 \; 结束

 例子
find /boot/ -name 'vm*'  -exec  cp  {}  /opt/  \;
find /boot/ -size +10M  -exec  cp  {}  /opt/  \; 

#############################################################################################


grep针对文本文件内容进行过滤

• 常用命令选项                  例子:
– -v,取反匹配                  grep -v root /etc/passwd        
– -i,忽略大小写                grep -i ROOT /etc/passwd


• 常用的匹配模式                  例子:
– word 包含字符串word             grep ^root /etc/passwd   
– ^word 以字符串word开头          grep root$ /etc/passwd
– word$ 以字符串word结尾
– ^$:匹配空行

显示/etc/login.defs文件有效信息(去除注释  去除空行)
grep -v ^# /etc/login.defs                                     去除注释  
grep -v ^# /etc/login.defs | grep   -v ^$                      去除空行
grep -v ^# /etc/login.defs | grep   -v ^$  >  /opt/1.txt   



正则表达式,用来查找过滤文档的工具符号
grep "root"        user                                        在user文档中查找有单词root的行
grep "^root"       user                                        在user文档中查找以单词root开头的行
grep "bash$"       user                                        在user文档中查找以单词bash结尾的行
grep "^$"          user                                        查找空行
grep "^ "          user                                        查找以空格开头的行
grep "[rot]"       user                                        查找字母r或者o或者t
grep "roo[tn]"     user                                        查找root或者roon
grep "[^rot]"      user                                        查找字母r或者o或者t之外的内容
grep "[a-z]"       user                                        查找小写字母
grep "[A-Z]"       user                                        查找大写字母
grep "[a-Z]"       user                                        查找所有字母
grep "[0-9]"       user                                        查找数字

grep "r..t"          user                                      查找以r开头t结尾中间有2个任意字符的单词
grep "ro*"           user                                      查找以r开头后面有或没有字母o的单词,o可以出现任意次
grep  "o\{1,2\}"     user                                      查找o出现1次到2次的行
grep  "o\{2,3\}"     user                                      查找o出现2次到3次的行
grep  "o\{2\}"       user                                      查找o出现2次的行
grep "o\{1,\} "      user                                      查找o出现1次以及1次以上
grep  "\(:0\)\{2\}"  user                                      查找:0(数字零)连续出现2次的行

扩展正则
egrep  "o+"            user                                    查找o出现1次以及1次以上
egrep  "o?"            user                                    查找o出现0次或1次
egrep  "o{1,2}"        user                                    查找o出现1次到2次的行
egrep  "o{2,3}"        user                                    查找o出现2次到3次的行
egrep  "o{2}"          user                                    查找o出现2次的行
egrep  "o{1,}"         user                                    查找o出现1次以及1次以上
egrep  "(:0){2}"       user                                    查找:0(数字零)连续出现2次的行
egrep  "bash|nologin"  user                                    查找bash或者nologin
egrep  "\bthe\b"  a                                            查找单词the,前后是空格或者特殊符号


############################################################################################################

vim 交互式文本编辑工具
sed 流式编辑器,能对文档执行增删改查等操作,逐行操作,非交互式
sed使用方式:
前置命令  |  sed 选项  (定址符)指令
sed 选项  (定址符)指令   文档
选项
-n 屏蔽默认输出
-i 写入到文件
-r 使用扩展正则
指令
p 输出文档内容
d 删除
s 替换

a 行后追加
i 行前插入
c 替换整行

sed -n 'p'           user                                        使用sed输出user文档中所有行
sed -n '1p'          user                                        使用sed输出user文档中第1行
sed -n '1,3p'        user                                        使用sed输出user文档中第1行到第3行
sed -n '1,+3p'       user                                        输出user文档中第1行以及后面的3行
sed -n '1p;4p'       user                                        输出第1行和第4行
sed -n '1~2p'        user                                        输出奇数行
sed -n '2~2p'        user                                        输出偶数行

sed '1a AAAA'                        user                        在第1行的后面追加AAAA
sed '/^bin/a AAAA'                   user                        在以bin开头的行的后面追加AAAA
sed '1i AAAA'                        user                        在第1行的前面追加AAAA
sed '/^bin/i AAAA'                   user                        在以bin开头的行的前面追加AAAA
sed '1c AAAA'                        user                        把第1行替换成AAAA
sed '/^bin/c AAAA'                   user                        把bin开头的行替换成AAAA
sed '$a 1.1.1.1 www.baidu.com'       /etc/hosts                  在hosts文件的最后一行后面追加ip地址与域名


使用正则做定址符
sed -n '/root/p'             /etc/passwd                         指令前面添加2个斜杠,中间使用正则,查找有root单词的行
sed -n '/bash$/p'            /etc/passwd
sed -rn '/bash|nologin/p'    user                                竖线"|" 是扩展正则,要加-r选项
sed -n '='                   user                                显示行号
sed -n '$='                  user                                显示最后一行的行号
sed  'd'                     user                                使用sed删除 user文档中所有行
sed  '1d'                    user                                使用sed删除user文档中第1行
sed  '1,3d'                  user                                使用sed删除user文档中第1行到第3行
sed  '1,+3d'                 user                                使用sed删除user文档中第1行以及后面3行

替换:
s/旧内容/新内容/ 或者 s$旧内容$新内容$  等符号
sed 's/2017/AAAA/'                   test.txt                     替换所有行的第1个2017为AAAA
sed 's/2017/AAAA/g'                  test.txt                     替换所有行的所有2017为AAAA
sed 's/2017/AAAA/2'                  test.txt                     替换所有行的第2个2017为AAAA
sed '1s/2017/AAAA/'                  test.txt                     替换第1行的第1个2017为AAAA
sed '2s/2017/AAAA/2'                 test.txt                     替换第2行的第2个2017为AAAA
sed '3s/2017/AAAA/3;3s/2017/AAAA/2;' test.txt                     替换第3行的第3个, 然后在替换第3行的第2个
sed '3s/2017/AAAA/2;3s/2017/AAAA/2;' test.txt                     效果同上


如何将 /bin/bash 替换为 /sbin/sh
sed 's#/bin/bash#/sbin/sh#' user
\(\)
()
保留=复制          \1   \2   \3
sed 's/.//2 ; s/.$//'                 nssw.txt                     利用替换功能,删除文档中每行的第2个字符和最后一个字符
sed -r 's/^(.)(.*)(.)$/\3\2\1/'       nssw.txt                     将每行的首个字符和最后一个字符互换,首先利用^(.)复制行首字符,   
                          定义为\1 , 然后复制行尾字符 (.)$ ,定义为\3   ,中间的字符无论多少都使用(.*)涵盖,定义为\2, 然后根据需求粘贴.

sed -r 's/^(.)(.)(.)(.)$/\4\3\2\1/'   aa                            aa文档中有abcd,将abcd 换成  dcba  

sed 's/[0-9]//g'                      nssw.txt                      删除所有数字
sed -r 's/([A-Z])/[\1]/g'             nssw.txt                      将所有大写字母添加中括号
  


编写一键部署ftp服务的脚本,要求ftp具备匿名上传功能
vim /etc/vsftpd/vsftpd.conf
#anon_upload_enable=YES
#anon_mkdir_write_enable=YES
sed 's/^#anon_/anon_/'

#!/bin/bash
yum -y install vsftpd  &> /dev/null
sed -i 's/^#anon_/anon_/'  /etc/vsftpd/vsftpd.conf
systemctl restart vsftpd
systemctl enable vsftpd
chmod o+w /var/ftp/pub 


############################################################################################################

awk  查找输出文件的内容 

awk使用方式: 
1,   前置命令 | awk 选项  条件{指令} 
2, awk 选项  条件{指令}   文件

指令 :   print  $1  $2  $3
选项 :    -F  分隔符

例子
awk '{print $1}'       nssa                       在nssa文件中查找所有行的第1列并输出
awk '{print}'          nssa                       输出文档所有内容
awk -F: '{print $6}'   /etc/passwd                以冒号做分隔符,输出第6列,相当于显示所有用户的家目录

提取网卡流量:
ifconfig eth0 | sed -rn '/RX p|TX p/p' | awk -F[\(\)] '{print $2}'  首先使用前置命令查看eth0网卡所有信息, 
         然后使用sed过滤显示有RX p(接收的流量)和TX p(发送的流量)的行, 最后使用awk 定义小括号为分隔符 ,并输出第2列

ifconfig eth0 | awk -F[\(\)] '/RX p|TX p/{print $2}'             awk也支持正则, 效果同上

awk支持常量输出,放在双引号中间即可
df -h | awk '/vda1/{print "当前主机根分区剩余空间是"$4}'             配合常量输出
awk '/Failed/{print "登录本机失败的IP地址",$11}' /var/log/secure    在安全日志文件中利用awk筛选出访问本机失败的ip,可加逗号做空格


awk的内置变量: 
$0显示所有      $1 $2 $3...      NR显示行号    NF显示列号

awk处理的时机:             相当于逐行任务之外的任务
BEGIN{print  }           在逐行任务之前添加任务,执行1次
{print}			 逐行任务,执行n次
END{print }		 在逐行任务之后添加任务,执行1次

例子
awk '{print}END{print NR}' nssw                显示所有内容,以及最后一行的行号
awk -F: 'BEGIN{print "User\tUid\tHome"}{print  $1"\t"$3"\t"$6}END{print "总计" NR "行"}' user    使用awk处理时机,
                                                                                                 输出表头,内容,和结尾
awk  'BEGIN{x=0}{x++}END{print x}'  user

awk处理条件:
1,使用正则
awk -F: '/root/{print}'        /etc/passwd      输入有root的行
awk -F: '$1~/root/{print}'     /etc/passwd      输入第一列包含root的行
awk -F: '$1!~/root/{print}'    /etc/passwd      输入第一列不包含root的行


2,使用字符或数字做条件,可以配合符号 ==  !=   >   <    >=   <=
awk -F: '$1=="root"{print}'         user         找第1列是root的行
awk -F: 'NR==1{print}'              user         找第一行
awk -F: '$3>=1000{print $1,$3}'    /etc/passwd   找第3列大于等于1000的行,并输出第1列与第3列
awk -F: '$3<10{print $1,$3}'       /etc/passwd   找第3列小于10的行,并输出第1列与第3列
awk -F: '$3==10{print $1,$3}'      /etc/passwd   找第3列等于10的行,找不到则无任何显示

3,使用逻辑符号    && 且     || 或

awk -F: '$3>10 && $3<20{print}'             /etc/passwd    找第3列大于10并且第3列小于20的行,  {print}可以省略不写
awk -F: '$1=="root" ||$1=="bin"{print}'     /etc/passwd    找第1列是root或是bin的行
awk -F: '$1=="rootabc" ||$1=="bin"{print}'  /etc/passwd    找第1列是rootabc或是bin的行
awk -F: '$1=="root" && $1=="bin"{print}'    /etc/passwd    找第1列既是root又是bin的行,逻辑错误,找不到
awk -F: '$3>100 && $3<10{print}'            /etc/passwd    逻辑错误找不到
awk -F: '$3>10 || $3<1000print}'            /etc/passwd    找所有行

4,运算
awk 'BEGIN{print 1+1}'
awk 'BEGIN{print 1.1+1.1}'
awk 'BEGIN{print 2*2}'
awk 'BEGIN{print 2/2}'
awk 'BEGIN{print 2%2}'
awk 'BEGIN{x=2;y=5;print x+y}'


seq 100 | awk '$1%7==0 || $1~/7/'            列出100以内整数中7的倍数或是含7的数

列出UID间于1~1000的用户详细信息
输出/etc/hosts映射文件内以127或者192开头的记录
方法二:
#!/bin/bash
u=`awk -F: '/bash$/{print $1}' /etc/passwd`
for i in $u
do
        awk -F: -v a=$i '$1==a{print $1,"-->" ,$2}' /etc/shadow
done

awk  选项             条件                                                  指令
   -F -v	正则,字符和数字,逻辑符号&& ||,运算	      {print $1 $2}


awk '{cba[$1]++}END{for(i in cba){print cba[i],i}}' abc               输出该文档中每行的第1列是什么内容,出现了几次.  
awk '{ip[$1]++}END{for(i in ip){print i,ip[i]}}'  abc  | sort -rk 2   将最后处理的结果交给sort排序, -k是定义按照哪列排序,
-r是降序排列

使用awk统计网站访问者的ip与点击量
awk '{ip[$1]++}END{for(i in ip){print ip[i],i}}'  /var/log/httpd/access_log  | sort -r 

可以配合脚本增加访问次数再次检测
#!/bin/bash
for i in {1..5000}
do
	elinks -dump 172.25.0.10 &> /dev/null
done

编写监控脚本,可以方便查看主机的若干参数

#!/bin/bash
while :
do
uptime |awk '{print "cpu平均负载:"$10,$11,$12}'
ifconfig eth0 |awk -F[\(\)] '/RX p/{print "网卡eth0接收的数据量是:"$2}'
ifconfig eth0 |awk -F[\(\)] '/TX p/{print "网卡eth0发送的数据量是:"$2}'
free -m | awk '/^Mem:/{print "主机剩余内存容量是:"$4"m"}'
df -h | awk '/vda1/{print "磁盘剩余空间是:"$4}'
u=`cat /etc/passwd | wc -l`
echo "计算机账户数量是:$u"
user=`who | wc -l`
echo "当前登录的用户数量是:$user"
p=`ps -aux | wc -l`
echo "目前开启的进程数量是:$p"
r=`rpm -qa | wc -l`
echo "目前安装的软件包数量是:$r"
sleep 2
clear
done



使用awk找出安全日志中对本机访问失败的ip记录与次数统计
awk '/Failed/{ip[$11]++}END{for(i in ip){print ip[i],i}}' /var/log/secure

#!/bin/bash
abc=`awk '/Failed/{ip[$11]++}END{for(i in ip){print ip[i]","i}}' /var/log/secure`
for i in $abc
do
	aa=${i%,*}
	bb=${i#*,}
	[ $aa -ge 10 ] && echo "$bb猜错10次以上密码了,赶紧收拾他" | mail -s test root
done


\w                  匹配数字字母下划线  a-z  A-Z  0-9
\W                  取反
grep "\w"  aaaa     在aaaa文件中找所有的数字字母下划线
\s                  各种空白,如空格,tab制表符等
\S                  取反





