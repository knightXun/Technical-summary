案例1：数据导入导出
案例2：管理表记录
案例3： 匹配条件
案例4： MySQL管理工具
1 案例1：数据导入导出
1.1 问题

修改检索目录为/myload
将/etc/passwd文件导入db3库的user表里，并添加行号字段。
将db3库user表所有记录导出, 存到/myload/user.txt 文件里。
步骤一：修改检索目录为/myload

1）修改配置文件，重启服务
]# mkdir  /myload  
]# chown  mysql  /myload 
]# vim  /etc/my.cnf
        [mysqld]
        secure_file_priv="/myload”
:wq
]# systemctl  restart mysqld
mysql> show  variables  like  “secure_file_priv”;  //查看
 +------------------+-----------------------+
| Variable_name    | Value                          |
+------------------+-----------------------+
| secure_file_priv   | /myload/   |
+------------------+-----------------------+     
Mysql>           
2）新建db3库、user表
[root@dbsvr1 ~]# mysql -u root –p123456
mysql> CREATE DATABASE db3;
create table db3.user(
        name char(50),
        password  char(1),      
        uid int,
        gid int,
        comment  char(150),     
        homedir char(50),       
        shell   char(50)        
);
Query OK, 0 rows affected (0.70 sec)
Mysql>
步骤二：将/etc/passwd文件导入db3库的user表里，并添加行号字段。

1）拷贝文件到检索目录下
[root@dbsvr1 ~]# 
[root@dbsvr1 ~]# cp  /etc/passwd   /myload/
2）导入数据
[root@dbsvr1 ~]# mysql –uroot –ptarena
mysql> load data infile "/myload/passwd" into table db3.user
       fields terminated by ":" lines terminated by "\n" ; //导入数据
mysql> select  * from  db3.user;  //查看表记录
mysql> alter table  db3.user
    -> add
    -> id  int primary key auto_increment first;  //添加行号id 字段
mysql> select  * from  db3.user; //查看表记录
步骤三：将db3库user表所有记录导出, 存到/myload/user.txt 文件里。

1）查询要导出的数据
    mysql> select  * from  db3.user ；            
2）导出数据
mysql> select  * from  db3.user  into outfile "/myload/user1.txt";
3）查看文件内容
]# cat  /myload/user1.txt   
2 案例2：管理表记录
2.1 问题

练习表记录的操作
练习插入表记录
练习更新表记录
练习查询表记录
练习删除表记录
2.2 步骤

实现此案例需要按照如下步骤进行。
步骤一：练习插入表记录

1）插入记录时，指定记录的每一个字段的值
这种情况下，不需要明确指出字段，但每条记录的值的顺序、类型都必须与表格结构向一致，否则可能无法正确插入记录。
比如，以下操作将向stu_info表插入3条表记录：
mysql> INSERT stu_info VALUES
    -> ('Jim','girl',24),
    -> ('Tom','boy',21),
    -> ('Lily','girl',20);
Query OK, 3 rows affected (0.15 sec)
Records: 3  Duplicates: 0  Warnings: 0
完成插入后确认表记录：
mysql> SELECT * FROM stu_info;
+------+--------+-----+
| name | gender | age |
+------+--------+-----+
| Jim  | girl   |  24 |
| Tom  | boy    |  21 |
| Lily | girl   |  20 |
+------+--------+-----+
3 rows in set (0.00 sec)
2）插入记录时，只指定记录的部分字段的值

这种情况下，必须指出各项值所对应的字段；而且，未赋值的字段应设置有默认值或者有自增填充属性或者允许为空，否则插入操作将会失败。
比如，向stu_info表插入Jerry的年龄信息，性别为默认的“boy”，自动编号，相关操作如下：
mysql> INSERT INTO stu_info(name,age)
    -> VALUES('Jerry',27);
Query OK, 1 row affected (0.04 sec)
类似的，再插入用户Mike的年龄信息：
mysql> INSERT INTO stu_info(name,age)
    -> VALUES('Mike',21);
Query OK, 1 row affected (0.05 sec)
确认目前stu_info表的所有记录：
mysql> SELECT * FROM stu_info;
+-------+--------+-----+
| name  | gender | age |
+-------+--------+-----+
| Jim   | girl   |  24 |
| Tom   | boy    |  21 |
| Lily  | girl   |  20 |
| Jerry | boy    |  27 |
| Mike  | boy    |  21 |
+-------+--------+-----+
5 rows in set (0.00 sec)
3）更新表记录时，若未限制条件，则适用于所有记录
将stu_info表中所有记录的age设置为10：
mysql> UPDATE stu_info SET age=10;
Query OK, 5 rows affected (0.04 sec)
Rows matched: 5  Changed: 5  Warnings: 0
确认更新结果：
mysql> SELECT * FROM stu_info;
+-------+--------+-----+
| name  | gender | age |
