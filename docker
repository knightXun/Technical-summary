配置Openstack

1：配置yum仓库
配置三台虚拟机                                                      base-vm openstack nova01 nova02                       
                                                      
                                                      opensatck主机扩容为50G,内存为8G
                                                      virsh start openstack
                                                      virsh blockresize --path /var/lib/libvirt/images/openstack.img --size 50G openstack
硬盘:                                                                virsh console openstack
分区:                                                               growpart /dev/vda 1
文件系统:                                                           xfs_growfs /
修改内存:                                                           virsh edit openstack
2CPU，8G 内存，50G 硬盘                                          
2CPU，4.5G 内存，100G 硬盘

配置静态IP ifcfg-eth0:                                  vim  /etc/sysconfig/network-scripts/ifcfg-eth0
                                                                          # Generated by dracut initrd
												DEVICE="eth0"
												ONBOOT="yes"
												NM_CONTROLLED="no"
												TYPE="Ethernet"
												BOOTPROTO="static"
												PERSISTENT_DHCLIENT="yes"
												IPADDR=192.168.1.10
												NEMASK=255.255.255.0
												GATEWAY=192.168.1.254
openstack : 192.168.1.10
nova: 192.168.1.11, 192.168.1.12


配置主机名 /etc/hosts，能够相互 ping 通:                      配置/etc/hosts，和/etc/resolv.conf文件
										
                                                               取主机名:hostnamectl set-hostname  
                                                 openstack vim /etc/hosts              
							     192.168.1.10 openstack       
                                                 192.168.1.11 nova01                             	
							     192.168.1.12 nova02
配置 dns 服务器 /etc/resolv.conf                     vim /etc/resolv.conf  //去掉search开头的行
                                                   ; generated by /usr/sbin/dhclient-script
                                                   nameserver 192.168.1.254   DNS解析

2：测试时间服务器                                               vim /etc/chrony.conf 
                                                      server 192.168.1.254 iburst 和真机同步时间
                                                   systemctl restart chronyd                             
验证时间同步:                                                    chronyc sources -v                                             


3：配置yum仓库:
创建挂载目录:
cd /linux-soft/04/openstack/
mkdir /var/ftp/RHEL7-extras
mkdir /var/ftp/RHEL7OSP-10
手动挂载:
mount RHEL7-extras.iso  /var/ftp/RHEL7-extras/
mount RHEL7OSP-10.iso /var/ftp/RHEL7OSP-10/

vim /etc/yum.repos.d/local.repo
[local_repo]
name=CentOS-$releasever - Base
baseurl="ftp://192.168.1.254/centos-1804"
enabled=1
gpgcheck=1
[RHEL7-extras]
name=RHEL7-extras
baseurl="ftp://192.168.1.254/RHEL7-extras"
enabled=1
gpgcheck=0
[RHEL7OSP-package]
name=RHEL7OSP-package
baseurl="ftp://192.168.1.254/RHEL7OSP-10/rhel-7-server-openstack-10-rpms"
enabled=1
gpgcheck=0
[RHEL7OSP-devtools]
name=RHEL7OSP-devtools
baseurl="ftp://192.168.1.254/RHEL7OSP-10/rhel-7-server-openstack-10-devtools-rpms"
enabled=1
gpgcheck=0

4：检查基础环境

安装额外的软件包:yum install -y qemu-kvm libvirt-client libvirt-daemon libvirt-daemon-driver-qemu python-setuptools

是否卸载firewalld 和 NetworkManager:rpm -qa  | grep NetworkManager* firewalld* 一定要关,拟机要接管网络节点管理
检查配置主机网络参数（静态IP):cat /etc/sysconfig/network-scripts/ifcfg-eth0 
主机名必须能够相互 ping 通: ping openstack主机名
检查配置主机yum源（4个，10670): yum repolist
依赖软件包是否安装
检查NTP服务器是否可用:chronyc  sources -v
检查 /etc/resolv.conf 不能有 search 开头的行:cat /etc/resolv.conf 

5：部署Openstack:yum install -y openstack-packstack
自动生成应答文件:packstack --gen-answer-file answer.ini  /answer.ini与answer.txt是一样的，只是用vim打开answer.ini文件有颜色

vim answer.ini
42  CONFIG_SWIFT_INSTALL=n
45  CONFIG_CEILOMETER_INSTALL=n                   计费相关模块
49  CONFIG_AODH_INSTALL=n                         计费相关模块
53  CONFIG_GNOCCHI_INSTALL=n                      计费相关模块
75  CONFIG_NTP_SERVERS=192.168.1.254              时间服务器的地址
98  CONFIG_COMPUTE_HOSTS=192.168.1.11             添加的节点
102 CONFIG_NETWORK_HOSTS=192.168.1.10,192.168.1.11 配置云主机ip地址
333 CONFIG_KEYSTONE_ADMIN_PW=a                    修改管理员的密码
840 CONFIG_NEUTRON_ML2_TYPE_DRIVERS=flat,vxlan    驱动类型
876 CONFIG_NEUTRON_ML2_VXLAN_GROUP=239.1.1.5      设置组播地址,最后一个随意不能为0和255,其他固定
910 CONFIG_NEUTRON_OVS_BRIDGE_MAPPINGS=physnet1:br-ex  物理网桥的名称
921 CONFIG_NEUTRON_OVS_BRIDGE_IFACES=br-ex:eth0    br-ex桥的名称与eth0连接，管理eth0,网桥与哪个物理网卡连接
1179 CONFIG_PROVISION_DEMO=n   DEMO是否测试,测试的话很占内存

启动生成虚拟主机:packstack --answer-file=answer.ini 
出现这个为成功: **** Installation completed successfully ******        
6：网络管理,如果;配置上面不成功一次,不会生成下面文件,要手动配置以下文件
查看外部OVS网桥及其端口:cat /etc/sysconfig/network-scripts/ifcfg-br-ex 
ONBOOT="yes"
NM_CONTROLLED="no" 
IPADDR="192.168.1.10"
PREFIX=24
GATEWAY=192.168.1.254
DEVICE=br-ex
NAME=br-ex
DEVICETYPE=ovs
OVSBOOTPROTO="static"
TYPE=OVSBridge
查看eth0网卡配置（该网卡为OVS网桥的接口):cat /etc/sysconfig/network-scripts/ifcfg-eth0 
DEVICE=eth0
NAME=eth0
DEVICETYPE=ovs
TYPE=OVSPort
OVS_BRIDGE=br-ex
ONBOOT=yes
BOOTPROTO=none

验证OVS配置:ovs-vsctl show

7：登录openstack
需要改配置文件并重新加载: vim /etc/httpd/conf.d/15-horizon_vhost.conf
35   WSGIProcessGroup apache
36   WSGIApplicationGroup %{GLOBAL}     添加这一行,修复自带的一个BUG
重新载入配置文件:apachectl  graceful 或 systemctl restart httpd  
查看用户名和密码:ls /root/keystonerc_admin生成的文件，里面有用户名和密码
cat keystonerc_admin 
unset OS_SERVICE_TOKEN
    export OS_USERNAME=admin  //用户名
    export OS_PASSWORD=a  //密码
    export OS_AUTH_URL=http://192.168.1.10:5000/v2.0
    export PS1='[\u@\h \W(keystone_admin)]\$ '
export OS_TENANT_NAME=admin
export OS_REGION_NAME=RegionOne


添加额外计算节点
1)更改answer.ini文件
[root@openstack ~]# vim answer.ini        //在openstack上面操作
98 CONFIG_COMPUTE_HOSTS=192.168.1.11,192.168.1.12    
102 CONFIG_NETWORK_HOSTS=192.168.1.10,192.168.1.11,192.168.1.12 
[root@openstack ~]# packstack --answer-file answer.ini
**** Installation completed successfully ******
2）这时浏览器访问时不出现页面，15-horizon_vhost.conf文件被还原，需要重新修改这个文件
[root@openstack ~]# cd /etc/httpd/conf.d/  
[root@openstack conf.d]# vi 15-horizon_vhost.conf
     35   WSGIProcessGroup apache            
     36   WSGIApplicationGroup %{GLOBAL}     //添加这一行
[root@openstack conf.d]# apachectl  graceful  //重新载入配置文件
3)查看登录用户:[root@openstack ~]# cat /root/keystonerc_admin   
 unset OS_SERVICE_TOKEN
    export OS_USERNAME=admin             用户
    export OS_PASSWORD=1bb4c987345c45ba  密码
实时监控:watch -n 1 '命令'    列子:看内存watch -n 1 'free -m'


分屏软件包:screen 横屏 先 ctrl+A  在shift+s  竖屏 先:ctrl+A 在  shift+| 
切换命令行: ctrl+A+tab  ctrl+A+c
退出:ctrl+A ctrl+d
vim -O /etc/passwd /etc/shadow



项目管理基本概念:
项目:一组隔离的资源和对象.由一组关联的用户进行管理;在旧版本里,也用租户(tenant)来表示;根据配置的需求,项目对应一个
组织、一个公司或是一个使用客户等;项目中可以有多个用户,项目中的用户可以在该项目创建、管理虚拟资源;具有admin角色的
用户可以创建项目;项目相关信息保存到MariaDB中.
缺省情况下,packstack安装的openstack中有两个独立的项目
admin:只有admin管理员可以创建项目.
services:与安装的各个服务关联.

项目命令行管理项目:                                                 创建名为dc项目
创建项目:openstack project create 项目名称                   openstack project create  dc
列出所有项目:openstack project list 
查看某一个项目详细信息:openstack project show  项目名称      openstack project show   dc
修改用户密码:格式 openstack user set --password [密码] [用户] 
禁用与激活项目:openstack project set --disable/enable 项目名称
查看项目配额:nova quota-show --tenant 项目名称
更新可用vcpu数据为30:nova qupta-update --cores 30 项目名称
删除项目:openstack project delete 项目名称

云主机类型基本概念:一个云主机类型对应一个xml文件(就是资源的模板);它定义了一台云主机可以使用的资源,
如内存大小、磁盘容量和CPU核心数等;管理员自定义云主机类型

镜像基本概念:在红帽openstack平台中,镜像指的是虚拟磁盘文件,磁盘文件中应该已经安装了可启动的操作系统;镜像管理功能由Glance服务提供;它形成了创建虚拟机实例最底层的块结构;镜像可以由用户上传,也可以通过
红帽官方站点下载.
Glance磁盘格式:raw;vhd;vmdk;vdi;iso;qcow2

镜像服务:提供了服务器镜像的拷贝、快照功能,可以作为模板快速建立、启动服务器;镜像服务维护了镜像的一致性;在上传镜像时,容器格式必须指定;容器格式指示磁盘文件格式是否包含了虚拟机元数据
镜像容器格式:bare;ovf;ova;aki;ami

openstack网络工作原理:
实例被分配到子网中,以实现网络连通性;每个项目可以有一到多个子网;在红帽的openstack平台中,openstack
服务是缺省的网络选项,nova网络服务作为备用;管理员能够配置丰富的网络,将其他openstack服务链接到这些
网络的接口上;每个项目都能有多个私有网络,各个项目的私有网络互相不受干扰
网络类型:项目网络:由Neutron提供的项目内部网络,网络间用vlan隔离;
外部网络:可以让虚拟机链接外部网络,但需要配置浮动IP地址;
提供商网络:将实例连接到现有网络,实现虚拟机实例与外部系统共享同一二层网络.



通过命令行管理镜像:
后端盘路径:/linux-soft/04/openstack/small.qcow2    磁盘镜像名:small_rhel6
上传镜像:openstack image creat --diskformat qcow2 --min-disk 10 --min-ram 512 --file /后端盘(镜像绝对路径.img)  磁盘镜像

列出镜像:openstack image list 
查看镜像详情:openstack image show 磁盘镜像      openstack image  show  small_rhel6
修改镜像属性:openstack image set --public 磁盘镜像
另存镜像为本地文件:openstack image save --file /本地路径.img 磁盘镜像
删除镜像:openstack image delete 磁盘镜像


分配地址格式:[起始地址,终止地址] 列子:[10.10.10.100,10.10.10.200]

出现云主机处于错误状态:systemctl status openstack-nova-compute.service 
控制台1046错误:看 8430行 /etc/nova/nova.conf 

1.创建管理项目:创建tedu项目--->创建uu用户--->通过Horizon进行配额调整
2.新建云主机类型:通过Horizon创建云主机类型
3.上传镜像:项目-->计算--->镜像
4.创建网络:
1)登陆admin用户,管理员-->创建外网A(网络-->创建网络供应商flat类型直连-->物理网络--->段ip-->打钩共享的和外部网络)-->子网
2)退出admin用户,登陆uu用户,创建A公网的子网wan(名称,真机网段192.168.1.1.0/24,网关192.168.1.254)-
-->A外网不需要激活DHCP
创建内网lan,UP,只勾创建子网,不勾共享-->子网名称lan-->10.10.11.0/24-->ipv4-->网关ip10.10.11.254-->子网详情:激活DHCP分配地址池10.10.11.100,10.10.11,200-->DNS服务器192.168.1.254
新建路由:route1-->UP-->公网A-->选择路由子网: lan 10.10.11.0/24-->ip地址10.10.11.254
5.管理浮动IP地址:项目-->计算-->访问和安全(分配ip给项目)
6：创建安全组及规则:项目-->计算-->访问和安全(创建安全组)-->管理规则:添加自己要的规则
7：创建云主机:详情-->源(选择源(镜像)-->创建新卷(否)-->分配下面系统)--->云主机类型(看套餐选择配置)
网络(可选公网或私网)-->安全组(自定义规则如:ssh入口)

 
安装opensatck排错方法
1)ntp时间不同步 Error:/usr/sbin/ntpdate
2)网桥名称写错:   Error:/usr/bin/ovs-vsctl list-ports br-exeth0 no  改正921行
3)yum源没有配置正确  Error :/usr/bin/yum -d 0 -e 0 -y install openstack dashboard 
改正:gpgcheck=0
4)出现Cannot allocate memory 内存不足,重新启动主机
5)访问openstack错误, 修改Apache配置文件 
6)rabbitmp-server没有起来   /systemctl start rabbtmq-server  改正:systemctl restart rabbtmq-server 或着 
7)创建cinder-volumes卷组失败 ERROR:the cinder 
8)如果/root/
9)出现/usr/bin/systemctl start openvswith ....falied,说明是ssse3指令集的错误  编辑openstart的xml文件    vim 
10)Could appeared during...'ascii'...  出现中文中文符号
11)控制台出现1006 falled to connect server (code:1006) 改正:vim /etc/nova/nova.conf 8430行,把域名添加到/etc/hosts里面,保证这个域名可以ping通
12)无法获取使用量信息,添加云主机失败 :内存才能太小
13)Connected-                                重启openstart-nova-console
14)云主机出现错误状态    重启opensatack主机(opensatck-nova-compute),或内网出现问题,
15)云主机热迁移失败    1.是否ping通  2. 创建的云主机有问题,不用共享存储,必须使用镜像文件
opensatck is not onstorage BLOCK ....
17)无可用端口    
18)主机ping不通浮动ip    1.是否关联浮动ip,关联后刷新即可
19)删除网络失败在哪个用户上面创建的就在那删除;从右往左删
20)创建角色失败 ERROE:...openstack role list... 查看mysql redis mongodb rabbitmp是否启动


Docker容器
容器技术已经成为应用程序封装和交付的核心技术
3大内核技术核心:
Cgroups(Control Groups)-资源管理; 
NameSpace-进程隔离; 
SELinux安全
启动一个容器相当于启动一个进程,Docker不是虚拟化;Docker没有操作系统,只开一个进程;
优点:轻量级,不占内存
缺点:隔离性没有虚拟化强;共用Linux内核,安全性有先天缺陷;SELinux难以驾驭;不易监控和排错

安装Docker
环境要求: 至少64位操作系统;RHEL7版本;关闭防火墙(不是必须)

准备两台虚拟机，IP为192.168.1.31和192.168.1.32

步骤一：配置yum源
1）配置IP（虚拟机配置静态ip）docker1和docker2主机同样操作
[root@localhost ~]# echo docker1 > /etc/hostname 
[root@localhost ~]# hostname docker1
[root@localhost ~]# echo docker2 > /etc/hostname 
[root@localhost ~]# hostname docker2
[root@docker1 ~]# vim /etc/sysconfig/network-scripts/ifcfg-eth0
# Generated by dracut initrd
DEVICE="eth0"
ONBOOT="yes"
IPV6INIT="no"
IPV4_FAILURE_FATAL="no"
NM_CONTROLLED="no"
TYPE="Ethernet"
BOOTPROTO="static"
IPADDR="192.168.1.31"
PREFIX=24
GATEWAY=192.168.1.254
[root@docker1 ~]# systemctl restart network

2）配置yum客户端，配置之前openstack的扩展源(RHEL7-extras.iso)即可（docker1和docker2主机同样操作）
[root@docker1 ]# vim /etc/yum.repos.d/rhel.repo
...
[local_extras]
name=CentOS-$releasever - Extras
baseurl="ftp://192.168.1.254/extras"
enabled=1
gpgcheck=0
[root@docker2 ]# vim /etc/yum.repos.d/rhel.repo
...
[local_extras]
name=CentOS-$releasever - Extras
baseurl="ftp://192.168.1.254/extras"
enabled=1
gpgcheck=0

4）安装docker（docker1和docker2主机同样操作）
yum -y install docker
systemctl restart docker
systemctl enable docker
ifconfig     //有docker0说明环境部署完成
docker version        //查看版本

Docter镜像
Docter中容器是基于镜像启动的
镜像采用分层设计
使用快照的cow技术,确保底层数据不丢失

docker hub镜像仓库
https://hub.docker.com
官方提供的公共镜像的仓库(Registry)

docker search busybox
INDEX(名称标签)        NAME (镜像名字)                DESCRIPTION          STARS    [OFFICIAL](官方)   AUTOMATED
[docker.io] [docker.io/busybox(镜像名字)] [Busybox base image.] [1649]     [OK](ok字样官方提供)       

man docker-search 查看man帮助
Docter search:    搜索镜像
Docter pull 镜像:   下载 
Docter push 镜像:   上传

导出,备份: 格式 docker save 名称家标签:默认标签 -o[output] 文件名 
             docker save docker.io/busybox:latest -o ff.tar
导入,恢复: 格式  docker load -i  tar包名                        
              docker load -i ff.tar 

装4个包 centos.tar; redis.tar;  ubuntu.tar ;nginx.tar   

容器的命令和真机的命令是隔离的
启动centos镜像生成一个容器: docker run -it docker.io/centos:latest /bin/bash 
                        docker run -it  类似于 virsh define satrt console .
然后另开一个终端查看容器信息: docker ps 类似于= virsh list

redhat   debian
rpm      dpkg
yum      apt.get

格式 : docker 选项  镜像名称 
镜像命令:          
docker images   查看镜像列表         
docker history  查看镜像制作历史
docker inspect  查看镜像底层信息
docker pull     下载镜像
docker push     上传镜像                docker pull docker.io/busybox
docker inspect  查看容器底层信息
docker rmi      删除本地镜像
docker save     镜像另存为tar包       docker save docker.io/busybox:latest -o ff.tar
docker load     使用tar包导入镜像     docker load -i ff.tar
docker search   搜索镜像
docker tag      修改镜像名称和标签     docker tag docker.io/busybox:latest ooxx:latest


容器常用命令
docker run                 运行容器
docke  ps                  查看正在运行的容器
docker stop                关闭容器
docker satrt               启动容器
docker restart             重启容器
docker inspect             查看容器底层信息
docker top                 查看容器进程列表            
docker stop/start/rm $(docker ps -aq) 删除所有关闭的容器
docker rmi                 删除镜像

pstree -p 0                查看上帝进程
docker  attach             进入容器,exit会导致容器关闭      退出办法:ctrl + p--> q 
docker  exec               进入容器,退出时不会关闭容器    docker exec -it 76 /bin/bash
docker  dommit             将新容器生成新镜像      docker commit 6d78ahhjah 容器名称:标签 
docker  top + 容器id        看指定容器进程
Docker  build -t 镜像名称 Dockerfile所在目录

自定义镜像与仓库

Dockerfile语法格式：
– FROM:                   基础镜像
– MAINTAINER:             镜像创建者信息(说明)
– EXPOSE:                 开放的端口
– ENV:                    设置环境变量
– ADD:                    复制文件到镜像
– RUN:                    制作镜像时执行的命令,可以有多个
– WORKDIR: 类似于cd        定义容器默认工作目录                  
– CMD:                    容器启动时执行的命令,仅可以有一条CMD




***************************************************************************

Dockerfile工作流程
mkdir 目录;cd 目录
vim Dockerfile
Docker build -t 镜像名称 Dockerfile所在目录

例子:用Dockerfile文件创建一个新的镜像文件
mkdir abc                 新建目录
cd abc                    进入目录
touch Dockerfile          Dockerfile文件第一个字母要大写
cp /etc/yum.repos.d/local.repo  ./    cp仓库

vim Dockerfile                           
 FROM docker.io/centos:latest     
 RUN  rm -f /etc/yum.repos.d/*.repo 
 ADD  rr.repo /etc/yum.repos.d/local.repo          
 RUN yum -y install net-tools vim iproute psmisc  bash-completion 装包

docker build -t 镜像名:标签 .
docker build -t test:latest . 生成一个叫test:latest的镜像

**********************************************************************************



vim /usr/lib/systemd/system/httpd.service             查看服务启动命令
ExecStart=/usr/sbin/httpd $OPTIONS -DFOREGROUND       10行


创建一个httpd的镜像


FROM myos:latest                                        
RUN yum -y install httpd
WORKDIR /var/www/html
ADD index.html  /var/www/html/index.html  
ENV hostname="webserver"    
EXPOSE 80                                               设置开放端口号
CMD ["/usr/sbin/httpd", "-DFOREGROUND"]                 启动httpd服务
MAINTAINER  lsy_tom redhat@163.com                       

vim index.html
hello nsd1904

docker build -t myos1:httpd .



**********************************************************************************************************

自定义私有仓库

装包:                                   yum -y install docker-distribution.x86_64 
设置开机自启:                          systemctl start docker-distribution.service
                               systemctl enable docker-distribution.service
开启5000端口

访问:                                    curl 192.168.1.31:5000/v2/
查看仓库内容:                            curl 192.168.1.31:5000/v2/_catalog
客户端配置
13行:允许非加密方式访问仓库            ADD_REGISTRY='--add-registry 192.168.1.31:5000'
24行:指定docker仓库地址               INSECURE_REGISTRY='--insecure-registry 192.168.1.31:5000'                             
重启服务:                                systemctl restart  docker                                

打标签:docker tag   旧镜像  新镜像    docker tag docker.io/myos:http 192.168.1.31:5000/ docker.io/myos:http
上传:  docker push  新镜像             docker push  192.168.1.31:5000/docker.io/myos:http
查看里面有什么镜像:                       curl  http://192.168.1.31:5000/v2/_catalog  
查看里面的镜像标签:                       curl  http://docker1:5000/v2/仓库名称/tags/list  装json插件,更好看

************************************************************************************************
卷的概念
docker容器不保存任何数据,就是一进程
重要数据使用外部卷存储(数据持久化)
容器可以挂载真实目录或共享存储为卷

docker run -itd -v 宿主机目录:容器目录 myos:latest


NFS共享存储
服务器创建NFS共享存储，共享目录为/content，权限为rw
客户端挂载共享，并将共享目录映射到容器中

步骤一：配置NFS服务器:            yum -y install nfs-utils      
                            mkdir /目录A
                            vim /etc/exports
root做出的修改普通用户也能访问  /目录A     *(rw，no_root_squash)  
                            systemctl restart nfs-server.service
                            systemctl restart nfs-secure.service
                            chmod 777 /目录A
                            echo 11 > /目录A/index.html

步骤二：配置客户端:                  yum -y install nfs-utils
                             systemctl restart nfs-server.service
                              docker run -itd -p 80:80 myos:httpd
                              showmount -e 服务器ip
                              mkdir /目录B
挂载映射:                              mount -t nfs(文件系统格式) 服务器ip:/目录A /目录B

外部也能访问容器做的web服务器  docker run  -d -p 80:80 -v /目录B:/var/www/html -it http服务镜像




新建docker1网络模型docker:  network   create  [--subnet=10.10.10.0/24]  docker1
[--subnet=10.10.10.0/24] 可以不加
使用自定义网桥（docker1）启动容器:docker  run  --network=docker1   -itd   docker.io/myos



将容器做成客户可以访问的web服务器:docker run -itd -p 80:80 myos:httpd
                            docker run -itd -p 80:80 docker.io/nginx:latest



